links:
https://www.youtube.com/watch?v=mXI2-gjIZ40

1-Capitulo(problema que o redux resolve- prop drilling)
2-Entendendo o redux: reduces e state global
  Para usar o redux, criamos o Reducer, um lugar que guarda o estado global, ou seja o estado que vai ser compartilhado entre os componentes.
   Um reducer para cada tipo de dados, um reducer para dados dos usuarios, um reducer para dados de produtos, etc. reducer se torna uma caixa de armazenamento de dados.
    Para guardar todos estes reducer, criamos um root reducer. (o root reducer eh como um galpao que guarda todas as caixas ou reducers essas caixas/reducer guardam os dados dentro delas)
3- Entendendo uso do useSelector
    Para que um componente tenha acesso a um state dentro do reducer que esta dentro do root reducer, precisamos usar um hook chamado useSelector.
4-Actions e Dispathes
    Para fazer modificacoes no estado dentro do reducer dentro do root reducer,usamos o hook useDispatch. esse pacote de dados que enviamos para modificar o estado eh chamada de action.
    O useDispatch e responsavel por enviar esta action para o reducer.
    Olhando mais de perto, action eh um objeto javascript. Este objeto eh composto por duas propriedades: type e payload.
    type eh o tipo da action, ou seja, o que queremos fazer com o estado. EX: se for um login sera do type login.
    payload eh o conteudo da action, ou seja, o que queremos alterar no estado. EX: se for um login, sera o email e senha.
    Cada vez que depachamos uma action, o reducer monitora o type para guardar o payload no estado indicado pelo type. Pois dentro de um reducer, podemos ter alguns ou varios tipos de dados entao precisamos indicar qual estado/dado queremos alterar.
------------------------------------------------------------------------------------------------
5-Setup inicial do redux (Projeto da aula:)
Depois de fazer o fork do projeto
yarn install //para instalar dependencias
yarn add redux react-redux //instala o redux
yarn start // aniciar o projeto

    1-criando o store, root-reducer e use reducer 
        1- depois de fazer todo o setup exigido pelo professor.
        2- criei o store.js, depois o root-reducer.js e depois o reducer.js
        3- no arquivo index.js importei o store e o Provider do react-redux
        4- no arquivo index.js adicionei a tag <Provider store={store}> envolvendo o app

        resumo dos nomes dos arquivos e funcoes:
        store (store)
        root-reducer (rootReducer)
        reducer (userReducer)


6-criando o user reducer
        1-dentro de reducer.js, criei a logica inicial do arquivo reducer.js, ele recebe uma action do tipo(type) user/login(com payload) ou user/logout(sem payload).
7-acessando dados de um reducer com o useSelector
    dentro do arquivo index.jsx da pasta header dentro da pasta components:
        1-importei o useSelector do react-redux e fiz o destructuring do useSelector:
        
        const { currentUser } = useSelector(rootReducer => rootReducer.userReducer);
        console.log({currentUser});

        O Hook useSelector eh usado para acessar o estado global do redux.
            Ou seja, acessa o estado global do redux para pegar os dados que foram armazenados no reducer.
        

8-Despachando Actions com useDispatch
        1-dentro do arquivo index.jsx da pasta header dentro da pasta components:

            const handleLoginClick = () => {//acao de login
            dispatch({ type: "user/login",
            payload: {
                name: "joao",
                email: "joao@gmail.com",
                password: "123456",
            },
            banana: "fruta"
            });
            };

        Anotacoes e observacoes:
        O Hook useDispatch eh usado para enviar uma action para o reducer.
            Ou seja, envia os dados para o reducer guardar no estado global(state).
            OBS: todo o objeto passado dentro de dispatch eh chamado do action e esse action eh passado para o reducer.
            OBS2: Dentro do reducer, somente o valor do state eh alterado.
            no exemplo abaixo, o state eh alterado de null para o objeto passado dentro de payload mas o initialState nao eh alterado.
        //Codigo
            const initialState = {
                currentUser: null, // Pode armazenar o nome do usuário ou null
            };

            const userReducer = (state = initialState, action) => {
                if(action.type==='user/login') {
                    return {
                        ...state,
                        currentUser: action.payload, // Armazena apenas o `name` do usuário
                    };
                } else if (action.type==='user/logout') {
                    return {
                        ...state,
                        currentUser:null, // Reseta o usuário para null no logout
                    }
                } else {
                    return state;
                }
            };
        //Codigo

        Entao o valor de state sai de 
        currentUser: null 
        para
        currentUser: {
                name: "joao",
                email: "joao@gmail.com",
                password: "123456",
        }

ate 29 minutos de video

------------------------------------------------------------------------------------------------
09-Action types 
(organizando o codigo/ organizando os types em um arquivo separado para evitar erros de digitacao do user/login por exemplo)

criei um arquivo chamado action-types.js dentro da pasta user para armazenar os types login e logout.

inseri os types atualizados no index.jsx na pasta header dentro da pasta components.

10-Criando action logout
    Adicionei a funcao logout no arquivo index.jsx dentro da pasta header dentro da pasta components.
essa funcao logout nao tem payload, entao so manda o dispatch com o type logout.
    Depois atualizei o reducer com switch pois eh mais comum usar switch com redux/reducer para tratar mais de um tipo de action.

ate o minuto 34:46 do video
------------------------------------------------------------------------------------------------
11-criando um arquivo separado para as actions
    Criei um arquivo chamado actions.js dentro da pasta User dentro da pasta Redux, que tem as actions login e logout. 

12-debug com redux logger
instalei a biblioteca, o reduxlogger:
    yarn add redux-logger
Depois importei o applyMiddleware do redux
Depois importei logger do redux-logger no arquivo store.js

Essa biblioteca faz aparecer os dados sobre a action no console do navegador
ate o minuto 38:00 do video

------------------------------------------------------------------------------------------------
13-Criando cart reducer
 1-Criei o action-types.js dentro da pasta cart dentro da pasta redux.
 2-Criei o actions.js dentro da pasta cart tambem.
 3-Criei o reducer.js dentro da pasta cart tambem.
 4-atualizei o root-reducer.js para incluir o cartReducer.
 5-atualizei o arquivo index.jsx dentro da pasta product-item. Dentro do arquivo, criei a funcao handleProductClick e coloquei o dispatch dentro de uma funcao handleProductClick.

 const handleProductClick = () => {
    dispatch(addProductToCart(product));
  };

    Como para fazer o dispatch enviamos um objeto com type e payload, a funcao addProductToCart faz isso, ela recebe o product como parametro para ser o payload e adiciona o type.
    
ate o minuto 47:00 do video
------------------------------------------------------------------------------------------------
14-Acessando o Cart Reducer no componente Cart
Modifiquei o arquivo index.jsx dentro da pasta cart dentro da pasta components.
    adicionei neste arquivo o products usando o useSelector:
    const { products } = useSelector(rootReducer => rootReducer.cartReducer);

    Depois adicionei o map para mostrar os produtos:
    {products.map(product => (
          <CartItem product={product} />
        ))}

*Tive que ajeitar o import styles do arquivo index.jsx dentro da pasta cart-item.
*Tive que adicionar a cor ao svg no CartItemContainer=styled.div
*Corrigi o erro do initialState no arquivo reducer.js na pasta cart dentro da pasta redux. Antes era: ...initialState e ...initialState.products, agora eh: ...state e ...state.products.

ate o minuto 50:00 do video
------------------------------------------------------------------------------------------------
15-Boa pratica: Logicas devem ficar dentro do reducer
Apenas foi exmplicado no video que a logica deve ficar dentro do reducer.
Ele falou da logica de adicionar a quantidade dos mesmos produtos que estao no carrinho.
------------------------------------------------------------------------------------------------
16-Aprimorando a adicao de um produto no carrinho
    no arquivo reducer.js dentro da pasta cart dentro da pasta redux, adicionei a logica de adicionar a quantidade dos mesmos produtos que estao no carrinho.

    OBS:
    Lembrando que, o quantity so passa a existir quando o produto eh adicionado ao carrinho. Quando o produto eh adicionado ao carrinho, ele cria o quantity com o valor 1. Se houver mais do mesmo produto  no carrinho, ele incrementa o quantity.

    ate o minuto 55:00 do video
------------------------------------------------------------------------------------------------
17-Acessando o Cart Reducer no componente Header
Criacao do numero de produtos adicionados ao carrinho no componente Header, no menu com nome Carrinho.

    Modifiquei o arquivo index.jsx dentro da pasta header dentro da pasta components.

    Adicionei essa logica para pegar o numero de produtos adicionados ao carrinho:
        const { products } = useSelector(rootReducer => rootReducer.cartReducer);
        const productsCount =useMemo(()=>{
        return products.reduce((acc, curr)=> acc+curr.quantity ,0)
        },[products])

    ate o minuto 57:25 do video
------------------------------------------------------------------------------------------------
18-Removendo um produto do carrinho
    Para comecar, devemos pensar que devemos retirar um produto do carrinho retirando o produto do estado do redux.
    Para isso, primeiro, criei uma nova action type dentro do arquivo action-types.js dentro da pasta cart dentro da pasta redux. REMOVE_PRODUCT:'cart/removeProduct'

    Depois criei mais um case no reducer.js dentro da pasta cart dentro da pasta redux. Esse case corresponde a action type REMOVE_PRODUCT que sera recebida. Pega o id do produto selecionado e faz uma lista filtrada do produto selecionado, que eh o que sera retornado ou seja faz uma lista sem o produto selecionado.

    Depois, criei uma nova action no arquivo actions.js dentro da pasta cart dentro da pasta redux. O nome da action eh removeProductFromCart

    Depois, criei uma nova funcao no arquivo index.jsx dentro da pasta cart-item dentro da pasta components. A funcao eh handleRemoveClick onde faz o dispatch do product.id para ser removido do carrinho.

    ate o minuto 1:00:25 do video
    ------------------------------------------------------------------------------------------------
19-Aumentando a quantidade de um produto no carrinho
    Primeiro dentro de actions.js da pasta cart, adicionei increaseProductQuantity.
    Segundo, dentro de action-types.js na pasta cart adicionei: INCREASE_PRODUCT_QUANTITY: "cart/increaseProductQuantity".
    Terceiro, dentro de reducer.js na pasta cart, adicionei o case para a action type:
    case CartActionnTypes.INCREASE_PRODUCT_QUANTITY:
    Quarto e ultimo, adicionei o dispatch na funcao handleIncreaseClick dentro do arquivo index.jsx dentro da pasta cart-item dentro da pasta components.

    ate o minuto 1:03:00 do video

 ------------------------------------------------------------------------------------------------
 20-Diminuindo a quantidade de um produto no carrinho
    Primeiro dentro de actions.js da pasta cart, adicionei decreaseProductQuantity.
    Segundo, dentro de action-types.js na pasta cart adicionei: DECREASE_PRODUCT_QUANTITY: "cart/decreaseProductQuantity".
    Terceiro, dentro de reducer.js na pasta cart, adicionei o case para a action type:
    case CartActionnTypes.DECREASE_PRODUCT_QUANTITY:
    Quarto e ultimo, adicionei o dispatch na funcao handleDecreaseClick dentro do arquivo index.jsx dentro da pasta cart-item dentro da pasta components.

ate o minuto 1:05:00 do video
------------------------------------------------------------------------------------------------

OBS:
    *Dentro do projeto em questao, o componente products e seu arquivo index.jsx que esta dentro da pasta products dentro da pasta components, eh o componente que vai ser usado para mostrar os produtos. Ele eh o componente principal da aplicacao.
    O componente data e seu arquivo products.js guardam todos os produtos, fazendo um papel parecido como o banco de dados local ou uma API.
    *O que essa aplicacao faz eh, o componente products pega os produtos do componente data e manda para o componente product-item para ele mostrar na tela e se o usuario apertar no botao ele manda o produto em questao para o redux salvar no carrinho de compras
 ------------------------------------------------------------------------------------------------