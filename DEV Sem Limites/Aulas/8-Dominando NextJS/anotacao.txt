1-Criei o projeto nextjs = npx create-next-app@latest

2-instalei o shadcn/ui = npx shadcn@latest init

3-instalei todos os componentes do shadcn/ui = npx shadcn@latest add avatar badge button calendar card chart checkbox dialog drawer dropdown-menu form input label popover scroll-area select separator sheet sidebar skeleton sonner table tabs textarea tooltip

4-instalei o prisma = yarn add prisma

5-executei o prisma = npx prisma init

6-instalei o docker com ajuda da IA, passando o tutorial que matheus passou:
    Criando Container do Postgres no Docker:

    https://docs.docker.com/engine/install/

    Você pode criar um container Docker com a imagem oficial do PostgreSQL usando o seguinte comando:

    docker run --name meu-postgres \
    -e POSTGRES_USER=postgres \
    -e POSTGRES_PASSWORD=docker \
    -p 5432:5432 \
    -d postgres
    Explicando os parâmetros:
    --name meu-postgres: nome do container.

    -e POSTGRES_USER=postgres: define o usuário do banco.

    -e POSTGRES_PASSWORD=docker: define a senha.

    -p 5432:5432: mapeia a porta local 5432 para a porta 5432 do container.

    -d: executa o container em segundo plano.

    postgres: é a imagem oficial (será baixada automaticamente se você ainda não tiver ela localmente).

    Verificar se o container está rodando:
    docker ps
    Acessar o banco via linha de comando (opcional):
    docker exec -it meu-postgres psql -U postgres

7-Depois instalei o pg4admin

Aula 4-Implementando Páginas de Autenticação
criei a pasta (auth) dentro da pasta app, dentro de auth criei a pasta components com seus arquivos signin-card.tsx e signup-card.tsx.

    intalei:
    yarn add zod @hookform/resolvers react-hook-form


    react-hook-form
    para fazer todo gerenciamento dos formulários do projeto

    zod junto com @hookform/resolvers
    para fazer a validação dos formulários

    2-Criei a pasta modules
    Dentro dessa pasta se encontram os modulos da aplicacao. Nela, vai ter o modulo de autenticacao.
    Alem do modulo de autenticacao, teremos outros modulos aqui nesta pasta no futuro.

    Dentro da pasta Modules, criei a pasta Auth (que tera tudo referente a autenticacao), dentro dela criei a pasta components e schemas.

    3-Rotas na pasta app
    Para criar a rota de uma pagina, devemos colocar ela dentro da pasta app.
    Neste caso, criei a pasta "(auth)" e dentro dela criei a pasta login e pasta registro com seus arquivos de pagina dentro delas chamados page.tsx. 

    OBS: Lembrando que por conta dos parenteses na pasta "(auth)", ela nao passa a fazer parte da rota, isso serve para somente criar uma organizacao nos arquivos do projeto. Esses parenteses sao chamados de grouping rounting

    OBS:Em resumo, as paginas dentro de App sao redenrizadas pelo nextjs, que por sua vez chamam as paginas de modules para dentro delas.

    4-Implementando os arquivos de modules e schemas do passo 2.
    Criei os aquivos login.ts e register.ts dentro da pasta schemas.
    Criei os arquivos signin-card.tsx e signup-card.tsx dentro da pasta components.
    Implementei o card de signup-card.tsx.
    obs: o arquivo signup-card.tsx necessita do arquivo de schema, register.ts.
    obs2: no arquivo signup-card.tsx, como usa um hook ele precisa ter 'use client' no topo do arquivo.

    5-Criei o layout.tsx dentro das pasta app para ser a base de toda a aplicacao ou de todas as rotas da aplicacao. Incrivelmente o layout eh lido automaticamente pelo nextjs oq quer dizer que ele precisa ter esse nome para funcionar.

    Em conjunto com a criacao do layout.tsx, coloquei a logo do projeto ui dentro da pasta components.

    6-por ultimo criei a pagina de login identica a pagina de registro mas retirando a necessidade de nome e modificando algumas coisas e alguns textos

Aula 05 - Personalizando Componentes do Shadcn/UI
    Fiz a atualizacao dos componentes button.tsx e input.tsx do shadcn/ui. Na pasta src/components/ui.
    E tambem atualizei o signin-card.tsx e signup-card.tsx no tamanho do botao usando size='lg' e coloquei 'e' ente os textos : Politica de Privacidade e Termos de Servico

Aula 06 - Configurando Login Social com AuthJS
    *Segui os passos do tutorial do site do authjs:
    link:https://authjs.dev/getting-started/installation?framework=yarn

    No terminal:
        1-Primeiro preciso instalar o authjs:
        yarn add next-auth@beta
        2-depois para gerar o arquivo env:
        npx auth secret

    No projeto:
        1-O arquivo (env.local) que foi criado com o comando acima, pego oq estava escrito nele e passo para (.env) entao excluo o (.env.local).

    *No projeto ainda no mesmo link:
    link:link:https://authjs.dev/getting-started/installation?framework=yarn
    Depois fiz como mandava o tutorial Configure ainda no mesmo link do authjs.
        1- Dentro da pasta lib, criei o arquivo auth.ts (colocando dentro dele o codigo que o site do authjs me deu)
        2- Dentro da pasta app, criei as pastas api/auth/[...nextauth] e dentro dela criei o arquivo route.ts (colocando dentro dele o codigo que o site do authjs me deu)
        3- Dentro da pasta src criei o arquivo middleware.ts. (colocando dentro dele o codigo que o site do authjs me deu)
    
    *Agora com o authjs so preparar o authjs para funcionar com o google. Em outro link do authjs, para fazer o login com o google, fiz assim:
    Acessei o link: https://authjs.dev/getting-started/providers/google 
    Segui o tutorial para adicionar o provider do google:
        Adicionei "AUTH_GOOGLE_ID" e "AUTH_GOOGLE_SECRET" no arquivo (.env)
        e deixei eles em branco  "AUTH_GOOGLE_ID" = "" e "AUTH_GOOGLE_SECRET" = ""

    *No arquivo auth.ts na pasta lib, adicionei o import:
        import Google from "next-auth/providers/google"
        E coloquei o Google na array de providers:
        providers: [Google],

    *Agora precisamos configurar o google para ele gerar dois codigos. Para isso preciso criar no google o taskmaster no link:
        https://console.cloud.google.com/apis/
        clico em "Selecione um projeto" e clico em "Novo projeto"
        Coloquei o nome do projeto "TaskMaster"
        Deixei sem organizacao
        Clico em criar

        1-Depois de criar, vou na aba "api e servicos", depois clico em "credenciais".
        2-Clico em "criar credenciais", depois clico em "ID do cliente OAuth" depois clico em "configurar tela de consentimento do usuario", clico em "Vamos comecar".
        3-Coloco o nome do app "TaskMaster App" e o email do desenvolvedor.
        4-Deixo marcado "Externo"
        5-Coloco meu email
        6-clico em concordo, continuar e criar.

    *Ainda no site do google, Visão geral de OAuth, clico no botao "Criar um cliente OAuth"
    Preencho os campos
        Tipo de aplicativo: Aplicativo da Web
        Nome do aplicativo: TaskMaster
        URL de origem: http://localhost:3000
        URL de redirecionamento autorizado: http://localhost:3000/api/auth/callback/google
        1-clico em criar
        2-copio o Client ID e o Client Secret, coloco no arquivo .env nos campos "AUTH_GOOGLE_ID" e "AUTH_GOOGLE_SECRET".
        3-La no google eu clico em ok.

    *No arquivo signup-card.tsx, no botao de "criar conta com o google" eu adicionei:
        "onClick={()=>signIn('google')}"
        e importei o signIn:
        import { signIn } from "next-auth/react";
        obs: como neste caso o componente era do lado cliente o metodo signIn vem do next-auth/react.
        Se fosse do lado do servidor, o metodo signIn vem arquivo lib/auth.ts.

    *modifiquei o signup-card.tsx o onClick do botao:
        "onClick={()=>signIn('google', {
            redirectTo: '/',
        })}"

    *No arquivo signin-card.tsx, no botao de "entrar com o google" eu fiz o mesmo que no signup-card.tsx.

    *feito com sucesso!

    *Para testar, na pasta raiz ou home do projeto, page.tsx, coloquei:
        1-async no home 
    Tambem dentro de home:

        2-
        "const session = await auth();
        console.log({session});"

    Importei o auth:
        1-import { auth } from "@/lib/auth";

Aula 07 - Configurando Prisma Adapter
    Necessario fazer a ligacao entre o prisma e o authjs. Pois na situacao em que o usuario faz login e em seguida cria um time na aplicacao, essa informacao eh salva em coockies no navegador mas precisamos que essas informacoes sejam salvas no banco de dados para que essa informacao seja permanenete e acessivel em qualquer dispositivo
    Para isso, precisamos criar um adapter.

    1-Acessamos o link do authjs: https://authjs.dev/getting-started/adapters/prisma
    2-executamos os comandos:
        yarn add @prisma/client @auth/prisma-adapter
        yarn add prisma -D

    3-Proximo passo seria colocar a:
        DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
        Mas ja temos ela no arquivo .env ja configurada:
        DATABASE_URL="postgresql://postgres:docker@localhost:5432/taskmaster?schema=public"

    4-Criar o arquivo prisma.ts na pasta lib.
        O arquivo prisma.ts deve ter o codigo sujerido pelo tutorial do site do authjs.
    obs: esse arquivo prisma.ts serve para fazer a ligacao entre o prisma e o authjs. Deixando o prima globalmente acessivel para a aplicacao. Pois sem ele pode ocorrer erros de excessao pois estariamos fazendo muitiplas conexoes para o banco de dados.

    5-Modificando o auth.ts dentro da pasta lib:
        import { PrismaAdapter } from "@auth/prisma-adapter";
        import { prisma } from "./prisma"

        Adicionamos tambem
        adapter: PrismaAdapter(prisma)


    6-Criamos o schema do PostgresSQL
        Dentro da pasta raiz do projeto, prisma acessando o arquivo schema.prisma. Subistituimos o codigo que havia la pelo o schema completo sujerido pelo tutorial do authjs.
    obs: o schema.prisma vai conter todas as informacoes necessarias que os providers vao permetir que a gente tenha acesso. Vamos ter acesso ao access token, tempo de expiracao, nome de usuario, imagem de perfil, email, etc.

    7-Precisamos instalar o migrate para atualizar o banco de dados toda vez que foi necessario.
        Para isso vamos executar no terminal:    
        yarn prisma migrate dev

        obs: ou seja, como nesta vez que eu modifiquei o banco de dados, adicionando varias tabelas como a tabela, users, account, sessions e etc eu devmo executar o comando yarn prisma migrate dev para subir essa modificacao no banco de dados, parecido com i github.

        Agora, toda vez que o usuario for autenticado, os dados do usuario serao salvos no banco de dados e nao nos coockies como era antes.

        obs: fiz login e notei que no terminal do VSCODE tinha os campos createdAT e updatedAT o que quer dizer que o banco de dados foi atualizado.
    
    