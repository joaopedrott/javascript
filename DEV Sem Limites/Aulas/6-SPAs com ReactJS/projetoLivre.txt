DevBooks
1-Overview do Projeto
OBS: Vimos como sera o projeto

2-Iniciando DevBooks
OBS: usamos o comando "yarn create vite projeto-02-devbooks --template react-ts" para criar o projeto. 
Em seguida usamos o comando "yarn" para instalar dependencias
Em seguida usamos o comando "yarn dev" para abrir o projeto no navegador

3-Configurando ESLint e Prettier
OBS:criei os arquivos .eslintrc.json e .prettierrc com as configuracoes do link e adicionei ao arquivo settings.json do VScode as configuracoes do link. (para abrir o settings.json devemos abrir usando ctrl + shift + p = preferencias: abrir as configuracoes do usuario)

https://gist.github.com/gcmatheusj/54c966371a4485c8318ab75a618d6dc2

4-Configurando Axios
OBS: usamos a API https://www.googleapis.com/books/v1/volumes?q=search+terms do site do google: https://developers.google.com/books/docs/v1/using?hl=pt-br#PerformingSearch mas para isso instalamos antes o AXIOS, no terminal: yarn add axios

deletamos alguns arquivos bases da criacao do react do vite como app.css e main.css alem de limpar o codigo do app.tsx

deletamos a pasta assets

criamos a pasta services e dentro dela criamos o arquivo responsavel por fazer a requisicao no google books utilizando o AXIOS

5-Configurando Styled Components
OBS: adicionamos a biblioteca styled components no terminal do projeto : yarn add styled-components

em seguida instalando as definicoes de tipos no terminal:
yarn add @types/styled-components -D

criamos os estilos globais: criamos uma pasta styles e dentro dela o arquivo global.ts

6-Configurando React Router Dom (Páginas)
OBS: criei a pasta pages e dentros delas as pages search, books e bookdetail 
logo depois instalei usando o terminal: yarn add react-router-dom para fazer a navegacao entre essas paginas

7-Criando SearchBox
OBS: criei a pasta components e criei a searchbox. 

Logo apos isso criei a pasta icons e criei o svg da lupa para colocar no searchbox.

Para utilizar esse svg, instalamos no projeto usando o terminal um plugin para svg no vite: 
yarn add vite-plugin-svgr

Depois adicionamos a configuracao no arquivo vite.config.ts o import do svgr e logo abaixo adicionei 
svgr()

Por ultimo no arquivo tsconfig.json, bem no final adicionei: "types": ["vite-plugin-svgr/client"]

8-Criando Página de Busca
OBS: fiz a estilizacao da primeira pagina, dentro da pasta Search no arquivo Search.styles.ts

9-Entendendo o hook useEffect
OBS:

/* useEffect(()=>{
        // imprimi a palavra Efeito a cada 1 segundo
        const interval = setInterval(()=> { 
            console.log('Efeito')
        }, 1000)

        //se caso mudarmos de pagina o use effect para gracas a esse return
        return () => {
            clearInterval(interval)
        }

    },[])//com a chaves "[]" (array de dependencia) vazia, podemos fazer com que o useEffect so execute uma vez e bem na hora que a pagina abrir. */
    obs: se eu colocar algo dentro da array de dependencias, se esse algo sofrer alteracao ele ira executar o useEffect, como se fosse realmente um efeito colateral.




10-Criando Página de Resultado da Busca de Livros
OBS: uso a api para buscar os livros, crio um hook useEffect para fazer essa busca assim que a pagina abrir usando oq foi digitado que foi passado como parametro na barra de pesquisa. 
Com livros em "maos" armazeno em um estado useState e faco duas interfaces

11-Criando Thumbnail dos Livros
OBS: Criei a pasta Thumbnail e criei o componente Thumbnail, que sera usado na pagina books.tsx ou seja, na pagina do resultado dos livros

12-Estilizando Página de Resultados
OBS: estilizei a pagina dos livros com o arquivo books.styles.ts. O titulo, subtitulo, li e ul 

13-Criando Página de Detalhes do Livro
OBS:criei a rota e a pagina com sua e estilziacao entretanto na descricao do livro, vem com html e para retirar tag html nessa descricao no texto da descricao do livro, instalei :
yarn add react-html-parser e yarn add @types/react-html-parser -D. Logo apois isso adicionei o import: import ReactHTMLParser from 'react-html-parser'. Essa biblioteca se chama: React Html Parser.

Por ultimo, criamos um botao de retorno

14-Adicionando Spinner (Loading)
OBS:Criei o componente spinner e coloquei ele na pagina Books.tsx e BookDetail.tsx

15-Tornando o DevBooks Responsivo
OBS:fiz o site ficar responsivo

Parte 2 do projeto devbooks-------------------------------------------------------

1-Criando Tema da Aplicação
OBS:Criei o arquivo theme.ts com varios estilos css e em seguida criei o arquivo styled-components.d.ts para fazer a interface do arquivo theme.ts para entao o vscode entender o tipo de dado do theme. Para ter acesso as informacoes dele.

2-Atualizando Estilos Globais
OBS: Normalizei o global.ts dos estilos globais usando o theme

3-Criando Button
OBS:Deletei as pages e os componentes e em seguida criei uma nova page inicial, a page SignIn. Logo apos eu criei o estilo do componente botao. Vale lembrar que o botao nao foi criado pois reaproveitamos o botao do proprio react, apenas criamos o button.styles.ts do botao.

4-Criando Input
OBS: Adicionei a cor do texto global no global.ts usando o theme. fiz o componente input por completo, index.ts, input.styles.ts, input.tsx. E por ultimo coloquei o componente input criado na pagina SignIn.tsx 

5-Criando Link
OBS:Criei o componente link, mas nao criei exatamente o componente pois vamos usar o componente link do react router doom. No fim adicionei na pagina SignIn

6-Criando Logo DevBooks
OBS:criei a logo utilizando o vite svgr

7-Página de Login
OBS:Criei a estilizacao da pagina de login criando o arquivo Auth.styles.ts, mas esse arquivo fica apenas dentro da pasta Auth pois esse mesmo arquivo de estilo servira tambem para a pagina de SignOut 

8-Página de Cadastro
OBS:Criei a interface de cadastro (SignUp) com a mesma estrutura do SignIn para manter o padrao de design do site. Adicionei a rota no App.tsx e a rota do botao "cadastre-se" no SignIn.tsx

9-Controlled vs Uncontrolled (estudo)
OBS:Componentes controlados e componente nao controlado. Componente controlado e o componente que armazena estado, por exemplo em um imput. Resumindo o componente pai armazena com um useState para ser usado em um componente input dentro do retorno do codigo. A desvantagem eh que cada vez que o usuario digita um caractere no input o componente eh reenderizado, fazendo assim mais processamento. A vantagem eh a flexibilidade no uso dos dados digitados no input.


Ja no nao controlado, nao existe o uso do useState. O que acontece eh que o componente input acessa diretamente os dados digitados. A desvantagem eh que nao se tem uma flexibilidade no uso recolhido dos dados. A vantagem eh que o componente somente eh redenrizado apenas uma vez. No projeto DEVbooks eh usado o nao controlado no input na pagina de login e cadastro.

10- Gerenciando Formulários com React Hook Form
Instalei o react hoock form, no terminal: yarn add react-hook-form
Alterei o input adicionando o forwardRef por fora do componente Input para que ele consiga receber a ref.
Ja no signIn.tsx eu coloquei o register em cada input.

Alem de pegar o register de dentro do useForm, pegamos o handleSubmit tambem (essas funcoes ja vem com o useForm). 
Criei a funcao onSubmit, para usar no handleSubmit. A funcao handleSubmit faz com que os dados sejam enviados para algum lugar, e o onSubmit que criei faz a execucao dos dados digitados no input junto com handleSubmit

obs: Lembrando que o register eh para pegar oq foi digitado no input (exclusivo para componente nao controlado, como neste caso). register atua exatamente como ref (Ref no react eh um meio de acessar diretamente no html da pagina. Acessa oque foi digitado no input no html. Entao o register adiciona ref ao componente input.)

resumindo: Fizemos as alteracoes no componente input.tsx, index.ts(index do input), signIn.tsx e singUp.tsx



11-Validando Formulários com Zod
OBS: Para validar os dados no input email e senha, vamos instalar o zod e hookform/resolvers(uma biblioteca para integrar o react hookform ao zod). No terminal: yarn add zod @hookform/resolvers. Lembrando que anteriormente eu instalei o react hookform. 
Em seguida importei o zodresolver e o z, criei o validationSchema (esquema de validacao) e subistitui a interface pelo z.infer typeof. 
Fiz a integracao do zod com react hookform. com o formState: {errors} peguei a mensagem de erro e coloquei ela no em cada input nas paginas SignIn e SignUp.

12-Introdução a Context API
OBS:Revisei o problema de prop drilling, que seria a passagem de props em 3 ou mais componentes. para resolver isso existe o context api que seria o uso do hook useContext. Com o context api um estado pode ficar acessivel a todos os componentes independente da onde eles estiverem.
    Primeiro para criar o contexto, precisamos fazer duas coisas, criar o createContext({} as user) com valor fazio nas chaves e Segundo, criar o provider para criar e tornar um estado global.

13-Criando Contexto de Autenticação
OBS:assim como no passo 12, criamos um contexto de autenticacao para a aplicacao(site). Criei a pasta context e seus arquivos, criei a pasta constants e seu arquivo storage e adicionei a tag AuthProvider no app.tsx (para que os componentes tenham acesso ao contexto)

14-Hook useAuth
OBS:Criei um custom hook chamado useAuth.ts dentro da pasta hooks, que acessa todos os dados do contexto criado no passo 13 (ou seja o: sessions, signIn, signUp, signOut, isAuthenticated, user). E para realmente ter acesso ao dados do contexto, inseri o hook criado (useAuth) na pagina de signIn.tsx e signUp.tsx.

Dentro do signIn.tsx eu inseri: const { signIn } =useAuth() 
e logo depois dentro da funcao onSubmit inseri: await signIn(data)

Fiz a mesma coisa na pagina de signUp (pagina de cadastro)

15-setup devbooks api
OBS: instalei os programas e banco de dados seguindo esse tutorial https://github.com/joaopedrott/devbooks-api

16-Configurando React Query
OBS: React Query eh um gerenciador de estado assincrono. Ele serve para auxiliar para quando a gente trabalha com dados que vem de servidor ( de uma api(backend)) a gente consegue criar cache dos dados que vem do servidor entre outras coisas.

Primeiro instalei no terminal do projeto:
yarn add @tanstack/react-query

depois
yarn add @tanstack/eslint-plugin-query -D

adicionei no arquivo .eslintrc.json:
"plugins": ["react", "react-hooks", "@typescript-eslint", "@tanstack/query"],

no arquivo app.tsx eu coloquei:
const queryClient = new QueryClient

e adicionei a tag QueryClientProvider para envolver toda a aplicacao
<QueryClientProvider client={queryClient}> </QueryClientProvider>

    Com isso, configurei o react query de forma global.
    Lembrando. Dentro de client={queryClient} teremos o cache salvo nele

    Em todos os lugares que precisar usar os hooks do react query, irei ter todos os dados de cache nesse componente <QueryClientProvider>

17-Hook useSignInMutation
OBS: Para fazer requisicao, fiz o hook useSignIn. 
Primeiro, criei o arquivo .env na raiz do projeto.
Segundo, criei o arquivo api  na pasta services e exclui o arquivo googleBooksApi.js
Terceiro, criei o arquivo useSignIn.ts (esse eh o hook para fazer requisicoes de login)
Quarto, adicionei ao AuthContext.tsx a linha: const signInMutation = useSignIn()
logo apos isso adicionei na funcao signIn dentro do AuthContext.tsx:         

await signInMutation.mutateAsync(user,{
            onSuccess: (session) => {
                setSession(session)
                localStorage.setItem(DEV_BOOKS_SESSION_KEY, JSON.stringify(session))
            }
        })



18-
OBS:

19-
OBS:

20-
OBS:

21-
OBS:

22-
OBS:

23-
OBS:

24-
OBS:

25-
OBS:

26-
OBS:

27-
OBS:

28-
OBS:

29-
OBS:

30-
OBS:

31-
OBS:

32-
OBS:

33-
OBS:

34-
OBS:

35-
OBS:

36-
OBS:

37-
OBS:

38-
OBS:

39-
OBS:

40-
OBS:

41-
OBS:

42-
OBS:

43-
OBS:

44-
OBS:

45-
OBS:
