https://www.youtube.com/watch?v=e6FigV2fLC8&ab_channel=Sujeitoprogramador



Por padrao, toda componente do NextJS Ã© um componente server-side.
Para ser client side, basta adicionar o atributo "use client" no topo do componente.

Obs componente Server-Side:

*Se mandarmos um console.log() dentro de um componente server-side, ele sera executado no servidor ou seja, imprimira no console do VSCODE ou CMD.
*No componente server-side, nao conseguimos usar hooks, como: useState, useEffect, useContext, etc.
*Em um componente server-side, podemos usar um fetch dentro de um componente server-side.


Obs componente Client-Side:

*Se mandarmos um console.log() dentro de um componente client-side, ele sera executado no browser ou seja, imprimira no console do navegador.
*No componente client-side, conseguimos usar hooks, como: useState, useEffect, useContext, etc.
*Em um componente client-side, nao conseguimos usar um fetch dentro de um componente client-side.
*O componente client-side nao pode ser assincrono(async).

Obs podemos usar componentes server-side e client-side em um mesmo projeto. Importando um componente client-side dentro de um componente server-side.
-----------------------------------------------------------------
server actions:
*Sao funcoes que podem ser executadas no lado do servidor.
Para isso basta adicionar o atributo "use server" no topo da funcao.

*Criei um form com botao dentro e uma funcao async handleSearchUsers Para
buscar usuarios e seus posts.
-----------------------------------------------------------------
Rotas dinamicas:
criei a pasta [id] dentro de posts e modifiquei o page.tsx do post colocando export no Postprops e adicionei a tag Link do post deixando tudo dinamico.
-----------------------------------------------------------------
Loading UI e Streaming
1-dentro do arquivo page.tsx da pasta [id] eu adicionei a linha: 
await new Promise((resolve) => setTimeout(resolve, 4000)) 
Para simular o carregamento da pagina.

2-criei um arquivo loading.tsx dentro da pasta [id]: esse arquivo sera carregado enquanto a pagina estiver carregando. No fim renomeei o arquivo para _loading.tsx para nao ser carregado para fazer o carregamento da pagina de outro jeito.

3-Para fazer isso eu criei uma pasta chamada components dentro da pasta [id] e criei um arquivo chamado post.tsx.
Dentro deste arquivo eu passei a pausa usando o promise quanto a requisicao do post para ele.
Ja, dentro do arquivo page.tsx da pasta [id] eu passei a chamar o componente post.tsx que neste caso se chama PostInfo (que e o nome da funcao/componente).

4-Para mostrar um componente de carregamento, neste arquivo page.tsx da pasta [id] eu adicionei a linha:
<Suspense fallback={<p>Carregando...</p>}>
Assim, enquanto o componente PostInfo estiver carregando, ele ira mostrar o texto "Carregando...".
-----------------------------------------------------------------
