DevBooks
1-Overview do Projeto
OBS: Vimos como sera o projeto

2-Iniciando DevBooks
OBS: usamos o comando "yarn create vite projeto-02-devbooks --template react-ts" para criar o projeto. 
Em seguida usamos o comando "yarn" para instalar dependencias
Em seguida usamos o comando "yarn dev" para abrir o projeto no navegador

3-Configurando ESLint e Prettier
OBS:criei os arquivos .eslintrc.json e .prettierrc com as configuracoes do link e adicionei ao arquivo settings.json do VScode as configuracoes do link. (para abrir o settings.json devemos abrir usando ctrl + shift + p = preferencias: abrir as configuracoes do usuario)

https://gist.github.com/gcmatheusj/54c966371a4485c8318ab75a618d6dc2

4-Configurando Axios
OBS: usamos a API https://www.googleapis.com/books/v1/volumes?q=search+terms do site do google: https://developers.google.com/books/docs/v1/using?hl=pt-br#PerformingSearch mas para isso instalamos antes o AXIOS, no terminal: yarn add axios

deletamos alguns arquivos bases da criacao do react do vite como app.css e main.css alem de limpar o codigo do app.tsx

deletamos a pasta assets

criamos a pasta services e dentro dela criamos o arquivo responsavel por fazer a requisicao no google books utilizando o AXIOS

5-Configurando Styled Components
OBS: adicionamos a biblioteca styled components no terminao do projeto : yarn add styled-components

em seguida instalando as definicoes de tipos no terminal:
yarn add @types/styled-components -D

criamos os estilos globais: criamos uma pasta styles e dentro dela o arquivo global.ts

6-Configurando React Router Dom (Páginas)
OBS: criei a pasta pages e dentros delas as pages search, books e bookdetail 
logo depois instalei usando o terminal: yarn add react-router-dom para fazer a navegacao entre essas paginas

7-Criando SearchBox
OBS: criei a pasta components e criei a searchbox. 

Logo apos isso criei a pasta icons e criei o svg da lupa para colocar no searchbox.

Para utilizar esse svg, instalamos no projeto usando o terminal um plugin para svg no vite: 
yarn add vite-plugin-svgr

Depois adicionamos a configuracao no arquivo vite.config.ts o import do svgr e logo abaixo adicionei 
svgr()

Por ultimo no arquivo tsconfig.json, bem no final adicionei: "types": ["vite-plugin-svgr/client"]

8-Criando Página de Busca
OBS: fiz a estilizacao da primeira pagina, dentro da pasta Search no arquivo Search.styles.ts

9-Entendendo o hook useEffect
OBS:

/* useEffect(()=>{
        // imprimi a palavra Efeito a cada 1 segundo
        const interval = setInterval(()=> { 
            console.log('Efeito')
        }, 1000)

        //se caso mudarmos de pagina o use effect para gracas a esse return
        return () => {
            clearInterval(interval)
        }

    },[])//com a chaves "[]" (array de dependencia) vazia, podemos fazer com que o useEffect so execute uma vez e bem na hora que a pagina abrir. */
    obs: se eu colocar algo dentro da array de dependencias, se esse algo sofrer alteracao ele ira executar o useEffect, como se fosse realmente um efeito colateral.




10-Criando Página de Resultado da Busca de Livros
OBS: uso a api para buscar os livros, crio um hook useEffect para fazer essa busca assim que a pagina abrir usando oq foi digitado que foi passado como parametro na barra de pesquisa. 
Com livros em "maos" armazeno em um estado useState e faco duas interfaces

11-Criando Thumbnail dos Livros
OBS: Criei a pasta Thumbnail e criei o componente Thumbnail, que sera usado na pagina books.tsx ou seja, na pagina do resultado dos livros

12-Estilizando Página de Resultados
OBS: estilizei a pagina dos livros com o arquivo books.styles.ts. O titulo, subtitulo, li e ul 

13-Criando Página de Detalhes do Livro
OBS:criei a rota e a pagina com sua e estilziacao entretanto na descricao do livro, vem com html e para retirar tag html nessa descricao no texto da descricao do livro, instalei :
yarn add react-html-parser e yarn add @types/react-html-parser -D. Logo apois isso adicionei o import: import ReactHTMLParser from 'react-html-parser'. Essa biblioteca se chama: React Html Parser.

Por ultimo, criamos um botao de retorno

14-Adicionando Spinner (Loading)
OBS:Criei o componente spinner e coloquei ele na pagina Books.tsx e BookDetail.tsx

15-Tornando o DevBooks Responsivo
OBS:fiz o site ficar responsivo

Parte 2 do projeto devbooks-------------------------------------------------------

1-Criando Tema da Aplicação
OBS:Criei o arquivo theme.ts com varios estilos css e em seguida criei o arquivo styled-components.d.ts para fazer a interface do arquivo theme.ts para entao o vscode entender o tipo de dado do theme. Para ter acesso as informacoes dele.

2-Atualizando Estilos Globais
OBS: Normalizei o global.ts dos estilos globais usando o theme

3-
OBS:

4-
OBS:

5-
OBS:

6-
OBS:

7-
OBS:

8-
OBS:

9-
OBS:

10-
OBS:

11-
OBS:

12-
OBS:

13-
OBS:

14-
OBS:

15-
OBS:

16-
OBS:

17-
OBS:

18-
OBS:

19-
OBS:

20-
OBS:

21-
OBS:

22-
OBS:

23-
OBS:

24-
OBS:

25-
OBS:

26-
OBS:

27-
OBS:

28-
OBS:

29-
OBS:

30-
OBS:

31-
OBS:

32-
OBS:

33-
OBS:

34-
OBS:

35-
OBS:

36-
OBS:

37-
OBS:

38-
OBS:

39-
OBS:

40-
OBS:

41-
OBS:

42-
OBS:

43-
OBS:

44-
OBS:

45-
OBS:
