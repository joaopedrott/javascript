Aula complementar sobre a criacao de um projeto em typescript 

Aula 1-Conceitos gerais de react e entendendo seu papel.

Aula 2- Criando aplicacao
    *Executamos no terminal o comando:
    npx create-react-app react dio-ts --template typescript

    *mas como nao pode palavra react por ser reservada eu usei o comando : 
    npx create-react-app reactprojeto dio-ts --template typescript


    *excluimos arquivos que nao precisamos

Aula 3- componentes e bootstrap
    *adicionamos o CDN do bootstrap on index da pasta public, o CDN de css e javascript usando o link:
    https://getbootstrap.com/docs/5.3/getting-started/introduction/

Aula 4- configurando o react-router
    *Para adicionar a rota entre as paginas, usamos o comando no terminal dentro da projeto:
    yarn add react-router-dom

    *Em seguida para adicionar a tipagem da router, usamos o comando:
    yarn add -D @types/react-router-dom

    *Adicionamos pasta chamada Pages e em seguida o arquivo Home.tsx e Perfil.tsx.

    *Adicionamos o arquivos routes.tsx para fazer a rota e em seguida adicionamos esse arquivo importando ele no App.tsx

Aula 5- Construindo Layout
    *fizemos o layout como componente usando a tipagem

aula 6- Estilizando a pagina inicial
    *adicionamos o navbar do bootstrap
    https://getbootstrap.com/docs/5.3/components/navbar/

    *
aula 7- Estilizando a pagina Perfil
    *fizemos  uma lista na pargina do Perfil
    
aula 8- Escrevendo o primeiro teste unitario (modulo de teste)
    *1-Teste unitario (teste mais barato)
    Sao queles teste que vao testar a unidade ou o menor componente possivel da aplicacao.

    *2-Teste de integracao (teste um pouco mais caro)
    Teste de como os componentes trabalham entre si.

    *3-Teste e2e (end to end) (teste mais caro)
    Testar desde o frontend, backend e banco de dados.


*Escrevemos o nosso primeiro teste unitario, no Layout criando o arquivo Layout.test.tsx e depois no Table criando arquivo Table.test.tsx. 
Logo depois foi utilizado o codigo no terminal: yarn test

aula 9- *Aplicamos o TDD e refatoracao da aplicacao
    Adicionamos mockData e modificamos o arquivo table.test.tsx e table.tsx
    *TDD e: escrever o codigo, fazer o teste e modificar o codigo ou Escreve o codigo, ve ele falhar, escreve de novo e ve ele passar no teste.

aula 10- Refatorando pagina de perfil teste de integracao
    *Criamos o arquivo Perfil.test.tsx para fazer o teste da pagina perfil.

aula 11- Criando os testes da pagina inicial
    *fizemos o botao funcionar, indo para a pagina perfil e fizemos o teste da pagina home 

aula 12- implementando a validacao para acesso
    *fizemos o site somente entrar na tela de perfil colocando nome de usuario

aula 13- Melhorando a validacao para acesso.
    *fizemos com que so entre na pagina perfil se e somente se, o usuario for validado

aula 14- Integrando com a API do Github
    * Para fazer essa integracao da api do Github, adicionamos ao projeto usando o terminal: 
        yarn add axios 
    E logo depois a tipagem do axios: 
        yarn add -D @types/axios