Aula 2- Projeto Criado com Vite
vitejs.dev/guide

Primeiro instalar o vite:
com o yarn instalado...
1-yarn create vite projeto-01-quiz --templete react

Depois, entrar no terminal da pasta do projeto instalar dependencias. No terminal
2-yarn



Aula 3- Importando Fontes e Criando Estilo Global
    botamos a fonte roboto e criamos o global.css

Aula 4- Entendendo Componentes e JSX no React
    no componente tag com letra minuscula sao do proprio (Nativa) do html e tag com a primeira letra Maiuscula representa um componente customizado que criamos 

Aula 5- falou de criar repositorio github

Aula 6- criamos o componente da tela e estilizamos

Aula 7-  entendemos props e fizemos as questoes e respostas dinamicas usando props

Aula 8- ententendo state adicionando contagem de pontos de acerto, a verificacao da resposta e dando feedback na cor da borda do botao

Aula 9- Adicionando Navegacao Entre as Perguntas com o uso do state


Aula 10- foi ele fazendo commit no github

Aula 11- Criando componente de resultado
tivemos que criar estados e funcao para resetar o game

Aula 12- criando barra de progresso
Criamos o componente ProgressBar
usamos no terminal o yarn add classnames para usar a biblioteca class names para concatenar mais de um class names para uma tag no index.jsx do ProgressBar

Aula 13- Fundamentos do TypeScript
 TypeScript eh um superset emcima do javascript. Ele faz com que passamos os dados corretos do tipo correto para nossas funcoes. Ele amarra nosso codigo para ser feito de forma correta, do tipo correto. Tipando nossas funcoes.
    ex:

    //essa eh a interface responsavel por fazer a tipagem (TypeScript) do que a funcao vai receber
        //1
    interface Question {
        id: number
        question: string
        answer: string[]
        correctAnswer: string
    }

    //esta eh a funcao, que vai receber os dados logo apos o : temos o nome da interface, Question
        //2
    function getCorrectAnswer (question : Question){
        return question.correctAnswer
    }

    //aqui esta a chamada de funcao passando todos os dados do jeito que devem ser passados. 
        //3
    getCorrectAnswer({
        id: 1,
        question: 'Qual eh meu nome?',
        answer: ['Matheus','Ana'],
        correctAnswer: 'Matheus'
    })

    //Agora a tipagem do retorno da funcao. Depois dos parenteses logo depois do : passamos o tipo, neste caso, String.
    function getCorrectAnswer (question : Question) : string{
        return question.correctAnswer
    }
    
    Lembrando que gracas 
    a tipagem, os dados passados como parametro tem por obrigatorio ser do modelo estipulado pela interface, causando logo um erro de imediato se caso estiver fora do padrao criado, assim, evitando possiveis bugs no futuro. Resumindo,  sem a tipagem de parametro poderia acarretar em bugs ou problemas pois poderia ser passado parametros de outros tipos.

Aula 14- Migrando Quiz para TypeScript
1- primeiro vamos adicionar o TypeScript no projeto:
no terminal digitar: yarn add typescript -D
    obs: com isso no package.json foi adicionado o typescript nesse arquivo

2-criamos o arquivo vite-env.d.ts escrito dentro dele:
    /// <reference types="vite/client" />

3-criamos um arquivo chamado tsconfig.json na raiz do projeto com tudo que esta escrito nele

4- criamos mais um arquivo na raiz do projeto, agora chamado de: tsconfig.node.json 

    Pronto, projeto Vite com suporte a typagem!
    
Aula 15- Adicionando Tipagem ao Quiz
migramos todo o codigo para typescript, mudando a extensao de todos os jsx dos componentes para tsx e criamos interfaces para cada um desses componentes



